// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.20;

import "@openzeppelin/contracts@5.0.2/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts@5.0.2/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts@5.0.2/token/ERC721/extensions/ERC721Pausable.sol";
import "@openzeppelin/contracts@5.0.2/access/Ownable.sol";

contract MyTavo is ERC721, ERC721Enumerable, ERC721Pausable, Ownable {
    uint256 private _nextTokenId;

    uint public immutable maxSupply = 100;
    bool public publicMintOpen = false;
    bool whiteListMintOpen = true;

    mapping(address => bool)public whiteList;

    constructor()
        ERC721("MyTavo", "MTG")
        Ownable(msg.sender)
    {}

    function _baseURI() internal pure override returns (string memory) {
        return "ipfs//QmbdByibT9vq5K86XpNtD5m6qRChu6vtZbjkixX3FEpH46/";
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }
    //le permiote a usuarios de whiteList mintear
    function whiteListMint()external payable {
        require (whiteListMintOpen, "windows closed");
        require (whiteList[msg.sender], "you re not in the whitelist");
        require (msg.value == 0.01 ether, "not enough ether send");
        _internalMint();
    }
    //minteo publico
    function publicMint() external payable {
        require (publicMintOpen, "windows closed");
        require (msg.value == 0.01 ether, "not enough ether send");
        _internalMint();
        
    }
    //fucion interna para rfactorizar codigo
    function _internalMint ()internal {
        require (totalSupply() < maxSupply, "no more NFTs");
        uint256 tokenId = _nextTokenId++;
        _safeMint(msg.sender, tokenId);
    }
    function updateMintWindows(bool _publicMintOpen, bool _whiteListMintOpen )external onlyOwner{
        publicMintOpen = _publicMintOpen;
        whiteListMintOpen = _whiteListMintOpen;
    }
    //para retirar fondos 
    function withdrauw(address _receiver)external onlyOwner{
        uint256 balance = address(this).balance;
        payable (_receiver).transfer(balance);
    }
    //agregar addres a whiteList
    function updateWhiteList(address[] memory _addresses)external onlyOwner{
        for (uint256 i;1 <_addresses.length; i++)
        {
            whiteList[_addresses[1]] = true;
        }
    }

    // The following functions are overrides required by Solidity.

    function _update(address to, uint256 tokenId, address auth)
        internal
        override(ERC721, ERC721Enumerable, ERC721Pausable)
        returns (address)
    {
        return super._update(to, tokenId, auth);
    }

    function _increaseBalance(address account, uint128 value)
        internal
        override(ERC721, ERC721Enumerable)
    {
        super._increaseBalance(account, value);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
